% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{sim_pops_ar}
\alias{sim_pops_ar}
\title{Multiple populations simulated using AR1 process.}
\usage{
sim_pops_ar(
  X,
  N0_mat,
  b0_mat,
  b1_mat,
  rho_mat,
  vcv_cube,
  obs_sigma,
  n_threads = 1L
)
}
\arguments{
\item{X}{Matrix of environmental variable.
It should have rows associated with a given time point and
columns associated with a given location.}

\item{N0_mat}{Matrix of starting population abundances (\verb{log(# individuals)})
by species and location.}

\item{b0_mat}{Matrix of \eqn{\beta_0} (the population-abundance intercept) values
by species and location.}

\item{b1_mat}{Matrix of \eqn{\beta_1} (the effect of \eqn{X} on \eqn{N}) values
by species and location.}

\item{rho_mat}{Matrix of growth rates by species and location.}

\item{vcv_cube}{Cube representing variance-covariance matrices for process error
among species, one matrix for each location.
It should have rows and columns associated with a given species,
and slices associated with a given location.}

\item{obs_sigma}{Vector of standard deviations of observation error for each species.}

\item{n_threads}{Number of cores to use. Defaults to 1.}
}
\value{
A 3-dimensional array.
The output will have rows associated with a given time point,
columns associated with a given species, and
slices associated with a given location.
}
\description{
Input and output N values are logged.
All input matrices other than \code{X} and \code{vcv_cube} should have rows associated
with a given species and columns associated with a given location.
See descriptions for \code{X} and \code{vcv_cube}.
}
\examples{
n_spp <- 3
max_t <- 10
n_locs <- 2
X <- matrix(rlnorm(max_t * n_locs), max_t, n_locs)
N0 <- matrix(log(10), n_spp, n_locs)
b0 <- matrix(log(100), n_spp, n_locs)
b1 <- matrix(0.1, n_spp, n_locs)
rho <- matrix(0.2, n_spp, n_locs)
vcv <- diag(n_spp)
vcv[lower.tri(vcv)] <- vcv[upper.tri(vcv)] <- 0.1
vcv <- replicate(n_locs, vcv, simplify = FALSE)
obs <- rep(0.1, n_spp)
sim_pops_ar(X, N0, b0, b1, rho, vcv, obs)

}
