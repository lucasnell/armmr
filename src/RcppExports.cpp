// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "lizard_types.h"
#include <RcppEigen.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sim_pops_ar
arma::cube sim_pops_ar(const arma::mat& X, const arma::mat& N0_mat, const arma::mat& b0_mat, const arma::mat& b1_mat, const arma::mat& rho_mat, const arma::cube& vcv_cube, const arma::vec& obs_sigma, const uint32& n_cores);
RcppExport SEXP _lizard_sim_pops_ar(SEXP XSEXP, SEXP N0_matSEXP, SEXP b0_matSEXP, SEXP b1_matSEXP, SEXP rho_matSEXP, SEXP vcv_cubeSEXP, SEXP obs_sigmaSEXP, SEXP n_coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type N0_mat(N0_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b0_mat(b0_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b1_mat(b1_matSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type rho_mat(rho_matSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type vcv_cube(vcv_cubeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type obs_sigma(obs_sigmaSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type n_cores(n_coresSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_pops_ar(X, N0_mat, b0_mat, b1_mat, rho_mat, vcv_cube, obs_sigma, n_cores));
    return rcpp_result_gen;
END_RCPP
}
// melt_cube
DataFrame melt_cube(const arma::cube& C);
RcppExport SEXP _lizard_melt_cube(SEXP CSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type C(CSEXP);
    rcpp_result_gen = Rcpp::wrap(melt_cube(C));
    return rcpp_result_gen;
END_RCPP
}
// generate_pars
List generate_pars(const uint32& n_time, const uint32& n_loc, const uint32& n_spp, const double& mean_b0, const double& mean_b1, const double& mean_rho, const double& sigma_b0, const double& sigma_b1, const double& sigma_rho, const double& sigma_eps, const double& sigma_obs, const std::string& corr_method);
RcppExport SEXP _lizard_generate_pars(SEXP n_timeSEXP, SEXP n_locSEXP, SEXP n_sppSEXP, SEXP mean_b0SEXP, SEXP mean_b1SEXP, SEXP mean_rhoSEXP, SEXP sigma_b0SEXP, SEXP sigma_b1SEXP, SEXP sigma_rhoSEXP, SEXP sigma_epsSEXP, SEXP sigma_obsSEXP, SEXP corr_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint32& >::type n_time(n_timeSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type n_loc(n_locSEXP);
    Rcpp::traits::input_parameter< const uint32& >::type n_spp(n_sppSEXP);
    Rcpp::traits::input_parameter< const double& >::type mean_b0(mean_b0SEXP);
    Rcpp::traits::input_parameter< const double& >::type mean_b1(mean_b1SEXP);
    Rcpp::traits::input_parameter< const double& >::type mean_rho(mean_rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_b0(sigma_b0SEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_b1(sigma_b1SEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_rho(sigma_rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_eps(sigma_epsSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma_obs(sigma_obsSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type corr_method(corr_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_pars(n_time, n_loc, n_spp, mean_b0, mean_b1, mean_rho, sigma_b0, sigma_b1, sigma_rho, sigma_eps, sigma_obs, corr_method));
    return rcpp_result_gen;
END_RCPP
}
// sim_pops
arma::mat sim_pops(const uint32& max_t, const arma::rowvec& N0, const arma::rowvec& r, const arma::mat& alpha, const double& sigma);
RcppExport SEXP _lizard_sim_pops(SEXP max_tSEXP, SEXP N0SEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint32& >::type max_t(max_tSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_pops(max_t, N0, r, alpha, sigma));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_stan_fit4lizard_mod();

static const R_CallMethodDef CallEntries[] = {
    {"_lizard_sim_pops_ar", (DL_FUNC) &_lizard_sim_pops_ar, 8},
    {"_lizard_melt_cube", (DL_FUNC) &_lizard_melt_cube, 1},
    {"_lizard_generate_pars", (DL_FUNC) &_lizard_generate_pars, 12},
    {"_lizard_sim_pops", (DL_FUNC) &_lizard_sim_pops, 5},
    {"_rcpp_module_boot_stan_fit4lizard_mod", (DL_FUNC) &_rcpp_module_boot_stan_fit4lizard_mod, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_lizard(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
