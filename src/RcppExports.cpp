// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "ReplicateTimeseries_types.h"
#include <RcppArmadillo.h>
#include <sitmo.h>
#include <Rcpp.h>

using namespace Rcpp;

// sim_pop_ar
arma::vec sim_pop_ar(const arma::vec& X, const double& N0, const double& b0, const double& b1, const double& rho, const double& sigma, const uint& seed);
RcppExport SEXP _ReplicateTimeseries_sim_pop_ar(SEXP XSEXP, SEXP N0SEXP, SEXP b0SEXP, SEXP b1SEXP, SEXP rhoSEXP, SEXP sigmaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const double& >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< const double& >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< const double& >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const uint& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_pop_ar(X, N0, b0, b1, rho, sigma, seed));
    return rcpp_result_gen;
END_RCPP
}
// sim_pops
arma::mat sim_pops(const uint& n_gen, const arma::rowvec& N0, const arma::rowvec& r, const arma::rowvec& alpha, const double& sigma, const uint& seed);
RcppExport SEXP _ReplicateTimeseries_sim_pops(SEXP n_genSEXP, SEXP N0SEXP, SEXP rSEXP, SEXP alphaSEXP, SEXP sigmaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const uint& >::type n_gen(n_genSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type N0(N0SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type r(rSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const uint& >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_pops(n_gen, N0, r, alpha, sigma, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ReplicateTimeseries_sim_pop_ar", (DL_FUNC) &_ReplicateTimeseries_sim_pop_ar, 7},
    {"_ReplicateTimeseries_sim_pops", (DL_FUNC) &_ReplicateTimeseries_sim_pops, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_ReplicateTimeseries(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
