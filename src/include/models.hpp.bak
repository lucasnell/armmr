/*
    lizard is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    lizard is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with lizard.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_lizard_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lizard");
    reader.add_event(74, 72, "end", "model_lizard");
    return reader;
}

class model_lizard : public prob_grad {
private:
    int n_obs;
    int n_ts;
    vector<int> obs_per;
    int n_coef;
    vector<int> g_per_ff;
    vector<int> lev_per_g;
    vector<vector<int> > b_groups;
    vector<int> p_groups;
    vector<double> y;
    vector<vector<double> > x;
    vector<double> time;
    double p_bound;
public:
    model_lizard(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_lizard(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_lizard_namespace::model_lizard";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_ts", "int", context__.to_vec());
            n_ts = int(0);
            vals_i__ = context__.vals_i("n_ts");
            pos__ = 0;
            n_ts = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            context__.validate_dims("data initialization", "obs_per", "int", context__.to_vec(n_ts));
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            obs_per = std::vector<int>(n_ts,int(0));
            vals_i__ = context__.vals_i("obs_per");
            pos__ = 0;
            size_t obs_per_limit_0__ = n_ts;
            for (size_t i_0__ = 0; i_0__ < obs_per_limit_0__; ++i_0__) {
                obs_per[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_coef", "int", context__.to_vec());
            n_coef = int(0);
            vals_i__ = context__.vals_i("n_coef");
            pos__ = 0;
            n_coef = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            context__.validate_dims("data initialization", "g_per_ff", "int", context__.to_vec(n_coef));
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            g_per_ff = std::vector<int>(n_coef,int(0));
            vals_i__ = context__.vals_i("g_per_ff");
            pos__ = 0;
            size_t g_per_ff_limit_0__ = n_coef;
            for (size_t i_0__ = 0; i_0__ < g_per_ff_limit_0__; ++i_0__) {
                g_per_ff[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "lev_per_g", "int", context__.to_vec(sum(g_per_ff)));
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            lev_per_g = std::vector<int>(sum(g_per_ff),int(0));
            vals_i__ = context__.vals_i("lev_per_g");
            pos__ = 0;
            size_t lev_per_g_limit_0__ = sum(g_per_ff);
            for (size_t i_0__ = 0; i_0__ < lev_per_g_limit_0__; ++i_0__) {
                lev_per_g[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "b_groups", "int", context__.to_vec(n_ts,sum(g_per_ff)));
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            b_groups = std::vector<std::vector<int> >(n_ts,std::vector<int>(sum(g_per_ff),int(0)));
            vals_i__ = context__.vals_i("b_groups");
            pos__ = 0;
            size_t b_groups_limit_1__ = sum(g_per_ff);
            for (size_t i_1__ = 0; i_1__ < b_groups_limit_1__; ++i_1__) {
                size_t b_groups_limit_0__ = n_ts;
                for (size_t i_0__ = 0; i_0__ < b_groups_limit_0__; ++i_0__) {
                    b_groups[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            context__.validate_dims("data initialization", "p_groups", "int", context__.to_vec(n_ts));
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            p_groups = std::vector<int>(n_ts,int(0));
            vals_i__ = context__.vals_i("p_groups");
            pos__ = 0;
            size_t p_groups_limit_0__ = n_ts;
            for (size_t i_0__ = 0; i_0__ < p_groups_limit_0__; ++i_0__) {
                p_groups[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("y", "n_obs", n_obs);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_obs));
            validate_non_negative_index("y", "n_obs", n_obs);
            y = std::vector<double>(n_obs,double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(n_obs,n_coef));
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            x = std::vector<std::vector<double> >(n_obs,std::vector<double>(n_coef,double(0)));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_limit_1__ = n_coef;
            for (size_t i_1__ = 0; i_1__ < x_limit_1__; ++i_1__) {
                size_t x_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                    x[i_0__][i_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("time", "n_obs", n_obs);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(n_obs));
            validate_non_negative_index("time", "n_obs", n_obs);
            time = std::vector<double>(n_obs,double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < time_limit_0__; ++i_0__) {
                time[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "p_bound", "double", context__.to_vec());
            p_bound = double(0);
            vals_r__ = context__.vals_r("p_bound");
            pos__ = 0;
            p_bound = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            current_statement_begin__ = 9;
            current_statement_begin__ = 10;
            current_statement_begin__ = 12;
            current_statement_begin__ = 13;
            current_statement_begin__ = 14;
            for (int k0__ = 0; k0__ < n_obs; ++k0__) {
                check_greater_or_equal(function__,"time[k0__]",time[k0__],0);
            }
            current_statement_begin__ = 15;
            check_greater_or_equal(function__,"p_bound",p_bound,0);
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 18;
            validate_non_negative_index("alpha", "n_coef", n_coef);
            num_params_r__ += n_coef;
            current_statement_begin__ = 19;
            validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
            num_params_r__ += sum(lev_per_g);
            current_statement_begin__ = 20;
            validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
            num_params_r__ += max(p_groups);
            current_statement_begin__ = 21;
            validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
            num_params_r__ += sum(g_per_ff);
            current_statement_begin__ = 22;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_lizard() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_coef", n_coef);
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec(n_coef));
        std::vector<double> alpha(n_coef,double(0));
        for (int i0__ = 0U; i0__ < n_coef; ++i0__)
            alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_coef; ++i0__)
            try {
            writer__.scalar_unconstrain(alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("z")))
            throw std::runtime_error("variable z missing");
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
        context__.validate_dims("initialization", "z", "double", context__.to_vec(sum(lev_per_g)));
        std::vector<double> z(sum(lev_per_g),double(0));
        for (int i0__ = 0U; i0__ < sum(lev_per_g); ++i0__)
            z[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < sum(lev_per_g); ++i0__)
            try {
            writer__.scalar_unconstrain(z[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z: ") + e.what());
        }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "max(p_groups)", max(p_groups));
        context__.validate_dims("initialization", "phi", "double", context__.to_vec(max(p_groups)));
        std::vector<double> phi(max(p_groups),double(0));
        for (int i0__ = 0U; i0__ < max(p_groups); ++i0__)
            phi[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < max(p_groups); ++i0__)
            try {
            writer__.scalar_lub_unconstrain(0,p_bound,phi[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what());
        }

        if (!(context__.contains_r("sig_beta")))
            throw std::runtime_error("variable sig_beta missing");
        vals_r__ = context__.vals_r("sig_beta");
        pos__ = 0U;
        validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
        context__.validate_dims("initialization", "sig_beta", "double", context__.to_vec(sum(g_per_ff)));
        std::vector<double> sig_beta(sum(g_per_ff),double(0));
        for (int i0__ = 0U; i0__ < sum(g_per_ff); ++i0__)
            sig_beta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < sum(g_per_ff); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sig_beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sig_beta: ") + e.what());
        }

        if (!(context__.contains_r("sig_res")))
            throw std::runtime_error("variable sig_res missing");
        vals_r__ = context__.vals_r("sig_res");
        pos__ = 0U;
        context__.validate_dims("initialization", "sig_res", "double", context__.to_vec());
        double sig_res(0);
        sig_res = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sig_res);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sig_res: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> alpha;
            size_t dim_alpha_0__ = n_coef;
            alpha.reserve(dim_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_constrain(lp__));
                else
                    alpha.push_back(in__.scalar_constrain());
            }

            vector<local_scalar_t__> z;
            size_t dim_z_0__ = sum(lev_per_g);
            z.reserve(dim_z_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_0__; ++k_0__) {
                if (jacobian__)
                    z.push_back(in__.scalar_constrain(lp__));
                else
                    z.push_back(in__.scalar_constrain());
            }

            vector<local_scalar_t__> phi;
            size_t dim_phi_0__ = max(p_groups);
            phi.reserve(dim_phi_0__);
            for (size_t k_0__ = 0; k_0__ < dim_phi_0__; ++k_0__) {
                if (jacobian__)
                    phi.push_back(in__.scalar_lub_constrain(0,p_bound,lp__));
                else
                    phi.push_back(in__.scalar_lub_constrain(0,p_bound));
            }

            vector<local_scalar_t__> sig_beta;
            size_t dim_sig_beta_0__ = sum(g_per_ff);
            sig_beta.reserve(dim_sig_beta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sig_beta_0__; ++k_0__) {
                if (jacobian__)
                    sig_beta.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sig_beta.push_back(in__.scalar_lb_constrain(0));
            }

            local_scalar_t__ sig_res;
            (void) sig_res;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_res = in__.scalar_lb_constrain(0,lp__);
            else
                sig_res = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 25;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            vector<vector<local_scalar_t__> > beta(n_ts, (vector<local_scalar_t__>(n_coef)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            vector<local_scalar_t__> y_pred(n_obs);
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred,DUMMY_VAR__);


            {
            current_statement_begin__ = 28;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning

            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 30;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 31;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning

                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 33;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 34;
                    if (as_bool(logical_eq(get_base1(g_per_ff,c,"g_per_ff",1),0))) {

                        current_statement_begin__ = 35;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha,c,"alpha",1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 37;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> sigs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs,DUMMY_VAR__);
                        current_statement_begin__ = 38;
                        validate_non_negative_index("zs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> zs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs,DUMMY_VAR__);


                        current_statement_begin__ = 40;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)) - 1); ++i) {

                            current_statement_begin__ = 41;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta,i,"sig_beta",1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 42;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z,get_base1(get_base1(b_groups,ts,"b_groups",1),i,"b_groups",2),"z",1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 45;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha,c,"alpha",1) + dot_product(sigs,zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 46;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)));
                        }
                    }
                }
                current_statement_begin__ = 50;
                stan::model::assign(y_pred, 
                            stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                            dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                            "assigning variable y_pred");
                current_statement_begin__ = 51;
                for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per,ts,"obs_per",1)) - 1); ++t) {

                    current_statement_begin__ = 52;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi,get_base1(p_groups,ts,"p_groups",1),"phi",1),(get_base1(time,t,"time",1) - get_base1(time,(t - 1),"time",1))) * (get_base1(y,(t - 1),"y",1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))), 
                                "assigning variable y_pred");
                }
                current_statement_begin__ = 55;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per,ts,"obs_per",1)));
                }
            }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < n_ts; ++i0__) {
                for (int i1__ = 0; i1__ < n_coef; ++i1__) {
                    if (stan::math::is_uninitialized(beta[i0__][i1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n_obs; ++i0__) {
                if (stan::math::is_uninitialized(y_pred[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y_pred" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 25;
            current_statement_begin__ = 26;

            // model body

            current_statement_begin__ = 61;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 1));
            current_statement_begin__ = 62;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 63;
            for (int i = 1; i <= sum(g_per_ff); ++i) {

                current_statement_begin__ = 64;
                lp_accum__.add(normal_log<propto__>(get_base1(sig_beta,i,"sig_beta",1), 0, 1));
                if (get_base1(sig_beta,i,"sig_beta",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            }
            current_statement_begin__ = 66;
            for (int i = 1; i <= max(p_groups); ++i) {

                current_statement_begin__ = 67;
                lp_accum__.add(normal_log<propto__>(get_base1(phi,i,"phi",1), 0, 0.5));
                if (get_base1(phi,i,"phi",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else if (get_base1(phi,i,"phi",1) > p_bound) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-log_diff_exp(normal_cdf_log(p_bound, 0, 0.5), normal_cdf_log(0, 0, 0.5)));
            }
            current_statement_begin__ = 69;
            lp_accum__.add(normal_log<propto__>(sig_res, 0, 1));
            if (sig_res < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            current_statement_begin__ = 71;
            lp_accum__.add(normal_log<propto__>(y, y_pred, sig_res));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("z");
        names__.push_back("phi");
        names__.push_back("sig_beta");
        names__.push_back("sig_res");
        names__.push_back("beta");
        names__.push_back("y_pred");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(lev_per_g));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(max(p_groups));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(g_per_ff));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ts);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_lizard_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> alpha;
        size_t dim_alpha_0__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.scalar_constrain());
        }
        vector<double> z;
        size_t dim_z_0__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < dim_z_0__; ++k_0__) {
            z.push_back(in__.scalar_constrain());
        }
        vector<double> phi;
        size_t dim_phi_0__ = max(p_groups);
        for (size_t k_0__ = 0; k_0__ < dim_phi_0__; ++k_0__) {
            phi.push_back(in__.scalar_lub_constrain(0,p_bound));
        }
        vector<double> sig_beta;
        size_t dim_sig_beta_0__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < dim_sig_beta_0__; ++k_0__) {
            sig_beta.push_back(in__.scalar_lb_constrain(0));
        }
        double sig_res = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < n_coef; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < sum(lev_per_g); ++k_0__) {
            vars__.push_back(z[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < max(p_groups); ++k_0__) {
            vars__.push_back(phi[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < sum(g_per_ff); ++k_0__) {
            vars__.push_back(sig_beta[k_0__]);
            }
        vars__.push_back(sig_res);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 25;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            vector<vector<local_scalar_t__> > beta(n_ts, (vector<local_scalar_t__>(n_coef)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 26;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            vector<local_scalar_t__> y_pred(n_obs);
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred,DUMMY_VAR__);


            {
            current_statement_begin__ = 28;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning

            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 30;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 31;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning

                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 33;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 34;
                    if (as_bool(logical_eq(get_base1(g_per_ff,c,"g_per_ff",1),0))) {

                        current_statement_begin__ = 35;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha,c,"alpha",1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 37;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> sigs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs,DUMMY_VAR__);
                        current_statement_begin__ = 38;
                        validate_non_negative_index("zs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> zs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs,DUMMY_VAR__);


                        current_statement_begin__ = 40;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)) - 1); ++i) {

                            current_statement_begin__ = 41;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta,i,"sig_beta",1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 42;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z,get_base1(get_base1(b_groups,ts,"b_groups",1),i,"b_groups",2),"z",1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 45;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha,c,"alpha",1) + dot_product(sigs,zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 46;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)));
                        }
                    }
                }
                current_statement_begin__ = 50;
                stan::model::assign(y_pred, 
                            stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::nil_index_list()), 
                            dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(xy_pos), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                            "assigning variable y_pred");
                current_statement_begin__ = 51;
                for (int t = (xy_pos + 1); t <= ((xy_pos + get_base1(obs_per,ts,"obs_per",1)) - 1); ++t) {

                    current_statement_begin__ = 52;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                (dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")) + (pow(get_base1(phi,get_base1(p_groups,ts,"p_groups",1),"phi",1),(get_base1(time,t,"time",1) - get_base1(time,(t - 1),"time",1))) * (get_base1(y,(t - 1),"y",1) - dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni((t - 1)), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x"))))), 
                                "assigning variable y_pred");
                }
                current_statement_begin__ = 55;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per,ts,"obs_per",1)));
                }
            }
            }

            // validate transformed parameters
            current_statement_begin__ = 25;
            current_statement_begin__ = 26;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < n_coef; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_ts; ++k_0__) {
                vars__.push_back(beta[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < n_obs; ++k_0__) {
            vars__.push_back(y_pred[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_lizard";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_coef; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(lev_per_g); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= max(p_groups); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(g_per_ff); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= n_coef; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_ts; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= n_obs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_coef; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(lev_per_g); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= max(p_groups); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(g_per_ff); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= n_coef; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_ts; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= n_obs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}




// Code generated by Stan version 2.18.0

#include <stan/model/model_header.hpp>

namespace model_snake_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_snake");
    reader.add_event(67, 65, "end", "model_snake");
    return reader;
}

class model_snake : public prob_grad {
private:
    int n_obs;
    int n_ts;
    vector<int> obs_per;
    int n_coef;
    vector<int> g_per_ff;
    vector<int> lev_per_g;
    vector<vector<int> > b_groups;
    vector<int> p_groups;
    vector<double> y;
    vector<vector<double> > x;
    vector<double> time;
public:
    model_snake(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_snake(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_snake_namespace::model_snake";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "n_obs", "int", context__.to_vec());
            n_obs = int(0);
            vals_i__ = context__.vals_i("n_obs");
            pos__ = 0;
            n_obs = vals_i__[pos__++];
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_ts", "int", context__.to_vec());
            n_ts = int(0);
            vals_i__ = context__.vals_i("n_ts");
            pos__ = 0;
            n_ts = vals_i__[pos__++];
            current_statement_begin__ = 5;
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            context__.validate_dims("data initialization", "obs_per", "int", context__.to_vec(n_ts));
            validate_non_negative_index("obs_per", "n_ts", n_ts);
            obs_per = std::vector<int>(n_ts,int(0));
            vals_i__ = context__.vals_i("obs_per");
            pos__ = 0;
            size_t obs_per_limit_0__ = n_ts;
            for (size_t i_0__ = 0; i_0__ < obs_per_limit_0__; ++i_0__) {
                obs_per[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_coef", "int", context__.to_vec());
            n_coef = int(0);
            vals_i__ = context__.vals_i("n_coef");
            pos__ = 0;
            n_coef = vals_i__[pos__++];
            current_statement_begin__ = 7;
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            context__.validate_dims("data initialization", "g_per_ff", "int", context__.to_vec(n_coef));
            validate_non_negative_index("g_per_ff", "n_coef", n_coef);
            g_per_ff = std::vector<int>(n_coef,int(0));
            vals_i__ = context__.vals_i("g_per_ff");
            pos__ = 0;
            size_t g_per_ff_limit_0__ = n_coef;
            for (size_t i_0__ = 0; i_0__ < g_per_ff_limit_0__; ++i_0__) {
                g_per_ff[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 8;
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "lev_per_g", "int", context__.to_vec(sum(g_per_ff)));
            validate_non_negative_index("lev_per_g", "sum(g_per_ff)", sum(g_per_ff));
            lev_per_g = std::vector<int>(sum(g_per_ff),int(0));
            vals_i__ = context__.vals_i("lev_per_g");
            pos__ = 0;
            size_t lev_per_g_limit_0__ = sum(g_per_ff);
            for (size_t i_0__ = 0; i_0__ < lev_per_g_limit_0__; ++i_0__) {
                lev_per_g[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            context__.validate_dims("data initialization", "b_groups", "int", context__.to_vec(n_ts,sum(g_per_ff)));
            validate_non_negative_index("b_groups", "n_ts", n_ts);
            validate_non_negative_index("b_groups", "sum(g_per_ff)", sum(g_per_ff));
            b_groups = std::vector<std::vector<int> >(n_ts,std::vector<int>(sum(g_per_ff),int(0)));
            vals_i__ = context__.vals_i("b_groups");
            pos__ = 0;
            size_t b_groups_limit_1__ = sum(g_per_ff);
            for (size_t i_1__ = 0; i_1__ < b_groups_limit_1__; ++i_1__) {
                size_t b_groups_limit_0__ = n_ts;
                for (size_t i_0__ = 0; i_0__ < b_groups_limit_0__; ++i_0__) {
                    b_groups[i_0__][i_1__] = vals_i__[pos__++];
                }
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            context__.validate_dims("data initialization", "p_groups", "int", context__.to_vec(n_ts));
            validate_non_negative_index("p_groups", "n_ts", n_ts);
            p_groups = std::vector<int>(n_ts,int(0));
            vals_i__ = context__.vals_i("p_groups");
            pos__ = 0;
            size_t p_groups_limit_0__ = n_ts;
            for (size_t i_0__ = 0; i_0__ < p_groups_limit_0__; ++i_0__) {
                p_groups[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("y", "n_obs", n_obs);
            context__.validate_dims("data initialization", "y", "double", context__.to_vec(n_obs));
            validate_non_negative_index("y", "n_obs", n_obs);
            y = std::vector<double>(n_obs,double(0));
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
                y[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            context__.validate_dims("data initialization", "x", "double", context__.to_vec(n_obs,n_coef));
            validate_non_negative_index("x", "n_obs", n_obs);
            validate_non_negative_index("x", "n_coef", n_coef);
            x = std::vector<std::vector<double> >(n_obs,std::vector<double>(n_coef,double(0)));
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_limit_1__ = n_coef;
            for (size_t i_1__ = 0; i_1__ < x_limit_1__; ++i_1__) {
                size_t x_limit_0__ = n_obs;
                for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
                    x[i_0__][i_1__] = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("time", "n_obs", n_obs);
            context__.validate_dims("data initialization", "time", "double", context__.to_vec(n_obs));
            validate_non_negative_index("time", "n_obs", n_obs);
            time = std::vector<double>(n_obs,double(0));
            vals_r__ = context__.vals_r("time");
            pos__ = 0;
            size_t time_limit_0__ = n_obs;
            for (size_t i_0__ = 0; i_0__ < time_limit_0__; ++i_0__) {
                time[i_0__] = vals_r__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 3;
            current_statement_begin__ = 4;
            current_statement_begin__ = 5;
            current_statement_begin__ = 6;
            current_statement_begin__ = 7;
            current_statement_begin__ = 8;
            current_statement_begin__ = 9;
            current_statement_begin__ = 10;
            current_statement_begin__ = 12;
            current_statement_begin__ = 13;
            current_statement_begin__ = 14;
            for (int k0__ = 0; k0__ < n_obs; ++k0__) {
                check_greater_or_equal(function__,"time[k0__]",time[k0__],0);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 17;
            validate_non_negative_index("alpha", "n_coef", n_coef);
            num_params_r__ += n_coef;
            current_statement_begin__ = 18;
            validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
            num_params_r__ += sum(lev_per_g);
            current_statement_begin__ = 19;
            validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
            num_params_r__ += sum(g_per_ff);
            current_statement_begin__ = 20;
            ++num_params_r__;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_snake() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("alpha")))
            throw std::runtime_error("variable alpha missing");
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_coef", n_coef);
        context__.validate_dims("initialization", "alpha", "double", context__.to_vec(n_coef));
        std::vector<double> alpha(n_coef,double(0));
        for (int i0__ = 0U; i0__ < n_coef; ++i0__)
            alpha[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < n_coef; ++i0__)
            try {
            writer__.scalar_unconstrain(alpha[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable alpha: ") + e.what());
        }

        if (!(context__.contains_r("z")))
            throw std::runtime_error("variable z missing");
        vals_r__ = context__.vals_r("z");
        pos__ = 0U;
        validate_non_negative_index("z", "sum(lev_per_g)", sum(lev_per_g));
        context__.validate_dims("initialization", "z", "double", context__.to_vec(sum(lev_per_g)));
        std::vector<double> z(sum(lev_per_g),double(0));
        for (int i0__ = 0U; i0__ < sum(lev_per_g); ++i0__)
            z[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < sum(lev_per_g); ++i0__)
            try {
            writer__.scalar_unconstrain(z[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable z: ") + e.what());
        }

        if (!(context__.contains_r("sig_beta")))
            throw std::runtime_error("variable sig_beta missing");
        vals_r__ = context__.vals_r("sig_beta");
        pos__ = 0U;
        validate_non_negative_index("sig_beta", "sum(g_per_ff)", sum(g_per_ff));
        context__.validate_dims("initialization", "sig_beta", "double", context__.to_vec(sum(g_per_ff)));
        std::vector<double> sig_beta(sum(g_per_ff),double(0));
        for (int i0__ = 0U; i0__ < sum(g_per_ff); ++i0__)
            sig_beta[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < sum(g_per_ff); ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,sig_beta[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sig_beta: ") + e.what());
        }

        if (!(context__.contains_r("sig_res")))
            throw std::runtime_error("variable sig_res missing");
        vals_r__ = context__.vals_r("sig_res");
        pos__ = 0U;
        context__.validate_dims("initialization", "sig_res", "double", context__.to_vec());
        double sig_res(0);
        sig_res = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0,sig_res);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable sig_res: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            vector<local_scalar_t__> alpha;
            size_t dim_alpha_0__ = n_coef;
            alpha.reserve(dim_alpha_0__);
            for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
                if (jacobian__)
                    alpha.push_back(in__.scalar_constrain(lp__));
                else
                    alpha.push_back(in__.scalar_constrain());
            }

            vector<local_scalar_t__> z;
            size_t dim_z_0__ = sum(lev_per_g);
            z.reserve(dim_z_0__);
            for (size_t k_0__ = 0; k_0__ < dim_z_0__; ++k_0__) {
                if (jacobian__)
                    z.push_back(in__.scalar_constrain(lp__));
                else
                    z.push_back(in__.scalar_constrain());
            }

            vector<local_scalar_t__> sig_beta;
            size_t dim_sig_beta_0__ = sum(g_per_ff);
            sig_beta.reserve(dim_sig_beta_0__);
            for (size_t k_0__ = 0; k_0__ < dim_sig_beta_0__; ++k_0__) {
                if (jacobian__)
                    sig_beta.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    sig_beta.push_back(in__.scalar_lb_constrain(0));
            }

            local_scalar_t__ sig_res;
            (void) sig_res;  // dummy to suppress unused var warning
            if (jacobian__)
                sig_res = in__.scalar_lb_constrain(0,lp__);
            else
                sig_res = in__.scalar_lb_constrain(0);


            // transformed parameters
            current_statement_begin__ = 23;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            vector<vector<local_scalar_t__> > beta(n_ts, (vector<local_scalar_t__>(n_coef)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            vector<local_scalar_t__> y_pred(n_obs);
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred,DUMMY_VAR__);


            {
            current_statement_begin__ = 26;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning

            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 28;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 29;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning

                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 31;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 32;
                    if (as_bool(logical_eq(get_base1(g_per_ff,c,"g_per_ff",1),0))) {

                        current_statement_begin__ = 33;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha,c,"alpha",1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 35;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> sigs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs,DUMMY_VAR__);
                        current_statement_begin__ = 36;
                        validate_non_negative_index("zs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> zs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs,DUMMY_VAR__);


                        current_statement_begin__ = 38;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)) - 1); ++i) {

                            current_statement_begin__ = 39;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta,i,"sig_beta",1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 40;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z,get_base1(get_base1(b_groups,ts,"b_groups",1),i,"b_groups",2),"z",1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 43;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha,c,"alpha",1) + dot_product(sigs,zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 44;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)));
                        }
                    }
                }
                current_statement_begin__ = 48;
                for (int t = xy_pos; t <= ((xy_pos + get_base1(obs_per,ts,"obs_per",1)) - 1); ++t) {

                    current_statement_begin__ = 49;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                }
                current_statement_begin__ = 51;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per,ts,"obs_per",1)));
                }
            }
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < n_ts; ++i0__) {
                for (int i1__ = 0; i1__ < n_coef; ++i1__) {
                    if (stan::math::is_uninitialized(beta[i0__][i1__])) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: beta" << '[' << i0__ << ']' << '[' << i1__ << ']';
                        throw std::runtime_error(msg__.str());
                    }
                }
            }
            for (int i0__ = 0; i0__ < n_obs; ++i0__) {
                if (stan::math::is_uninitialized(y_pred[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: y_pred" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;

            // model body

            current_statement_begin__ = 57;
            lp_accum__.add(normal_log<propto__>(alpha, 0, 1));
            current_statement_begin__ = 58;
            lp_accum__.add(normal_log<propto__>(z, 0, 1));
            current_statement_begin__ = 59;
            for (int i = 1; i <= sum(g_per_ff); ++i) {

                current_statement_begin__ = 60;
                lp_accum__.add(normal_log<propto__>(get_base1(sig_beta,i,"sig_beta",1), 0, 1));
                if (get_base1(sig_beta,i,"sig_beta",1) < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
                else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            }
            current_statement_begin__ = 62;
            lp_accum__.add(normal_log<propto__>(sig_res, 0, 1));
            if (sig_res < 0) lp_accum__.add(-std::numeric_limits<double>::infinity());
            else lp_accum__.add(-normal_ccdf_log(0, 0, 1));
            current_statement_begin__ = 64;
            lp_accum__.add(normal_log<propto__>(y, y_pred, sig_res));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("alpha");
        names__.push_back("z");
        names__.push_back("sig_beta");
        names__.push_back("sig_res");
        names__.push_back("beta");
        names__.push_back("y_pred");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(lev_per_g));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(sum(g_per_ff));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_ts);
        dims__.push_back(n_coef);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_obs);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "model_snake_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector<double> alpha;
        size_t dim_alpha_0__ = n_coef;
        for (size_t k_0__ = 0; k_0__ < dim_alpha_0__; ++k_0__) {
            alpha.push_back(in__.scalar_constrain());
        }
        vector<double> z;
        size_t dim_z_0__ = sum(lev_per_g);
        for (size_t k_0__ = 0; k_0__ < dim_z_0__; ++k_0__) {
            z.push_back(in__.scalar_constrain());
        }
        vector<double> sig_beta;
        size_t dim_sig_beta_0__ = sum(g_per_ff);
        for (size_t k_0__ = 0; k_0__ < dim_sig_beta_0__; ++k_0__) {
            sig_beta.push_back(in__.scalar_lb_constrain(0));
        }
        double sig_res = in__.scalar_lb_constrain(0);
            for (int k_0__ = 0; k_0__ < n_coef; ++k_0__) {
            vars__.push_back(alpha[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < sum(lev_per_g); ++k_0__) {
            vars__.push_back(z[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < sum(g_per_ff); ++k_0__) {
            vars__.push_back(sig_beta[k_0__]);
            }
        vars__.push_back(sig_res);

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 23;
            validate_non_negative_index("beta", "n_ts", n_ts);
            validate_non_negative_index("beta", "n_coef", n_coef);
            vector<vector<local_scalar_t__> > beta(n_ts, (vector<local_scalar_t__>(n_coef)));
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta,DUMMY_VAR__);
            current_statement_begin__ = 24;
            validate_non_negative_index("y_pred", "n_obs", n_obs);
            vector<local_scalar_t__> y_pred(n_obs);
            stan::math::initialize(y_pred, DUMMY_VAR__);
            stan::math::fill(y_pred,DUMMY_VAR__);


            {
            current_statement_begin__ = 26;
            int xy_pos(0);
            (void) xy_pos;  // dummy to suppress unused var warning

            stan::math::fill(xy_pos, std::numeric_limits<int>::min());
            stan::math::assign(xy_pos,1);


            current_statement_begin__ = 28;
            for (int ts = 1; ts <= n_ts; ++ts) {
                {
                current_statement_begin__ = 29;
                int beta_pos(0);
                (void) beta_pos;  // dummy to suppress unused var warning

                stan::math::fill(beta_pos, std::numeric_limits<int>::min());
                stan::math::assign(beta_pos,1);


                current_statement_begin__ = 31;
                for (int c = 1; c <= n_coef; ++c) {

                    current_statement_begin__ = 32;
                    if (as_bool(logical_eq(get_base1(g_per_ff,c,"g_per_ff",1),0))) {

                        current_statement_begin__ = 33;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(alpha,c,"alpha",1), 
                                    "assigning variable beta");
                    } else {
                        {
                        current_statement_begin__ = 35;
                        validate_non_negative_index("sigs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> sigs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(sigs, DUMMY_VAR__);
                        stan::math::fill(sigs,DUMMY_VAR__);
                        current_statement_begin__ = 36;
                        validate_non_negative_index("zs", "get_base1(g_per_ff,c,\"g_per_ff\",1)", get_base1(g_per_ff,c,"g_per_ff",1));
                        vector<local_scalar_t__> zs(get_base1(g_per_ff,c,"g_per_ff",1));
                        stan::math::initialize(zs, DUMMY_VAR__);
                        stan::math::fill(zs,DUMMY_VAR__);


                        current_statement_begin__ = 38;
                        for (int i = beta_pos; i <= ((beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)) - 1); ++i) {

                            current_statement_begin__ = 39;
                            stan::model::assign(sigs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(sig_beta,i,"sig_beta",1), 
                                        "assigning variable sigs");
                            current_statement_begin__ = 40;
                            stan::model::assign(zs, 
                                        stan::model::cons_list(stan::model::index_uni(((i - beta_pos) + 1)), stan::model::nil_index_list()), 
                                        get_base1(z,get_base1(get_base1(b_groups,ts,"b_groups",1),i,"b_groups",2),"z",1), 
                                        "assigning variable zs");
                        }
                        current_statement_begin__ = 43;
                        stan::model::assign(beta, 
                                    stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(alpha,c,"alpha",1) + dot_product(sigs,zs)), 
                                    "assigning variable beta");
                        current_statement_begin__ = 44;
                        stan::math::assign(beta_pos, (beta_pos + get_base1(g_per_ff,c,"g_per_ff",1)));
                        }
                    }
                }
                current_statement_begin__ = 48;
                for (int t = xy_pos; t <= ((xy_pos + get_base1(obs_per,ts,"obs_per",1)) - 1); ++t) {

                    current_statement_begin__ = 49;
                    stan::model::assign(y_pred, 
                                stan::model::cons_list(stan::model::index_uni(t), stan::model::nil_index_list()), 
                                dot_product(stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_uni(ts), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "beta"),stan::model::rvalue(x, stan::model::cons_list(stan::model::index_uni(t), stan::model::cons_list(stan::model::index_omni(), stan::model::nil_index_list())), "x")), 
                                "assigning variable y_pred");
                }
                current_statement_begin__ = 51;
                stan::math::assign(xy_pos, (xy_pos + get_base1(obs_per,ts,"obs_per",1)));
                }
            }
            }

            // validate transformed parameters
            current_statement_begin__ = 23;
            current_statement_begin__ = 24;

            // write transformed parameters
            if (include_tparams__) {
            for (int k_1__ = 0; k_1__ < n_coef; ++k_1__) {
                for (int k_0__ = 0; k_0__ < n_ts; ++k_0__) {
                vars__.push_back(beta[k_0__][k_1__]);
                }
            }
            for (int k_0__ = 0; k_0__ < n_obs; ++k_0__) {
            vars__.push_back(y_pred[k_0__]);
            }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_snake";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_coef; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(lev_per_g); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(g_per_ff); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= n_coef; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_ts; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= n_obs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= n_coef; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(lev_per_g); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= sum(g_per_ff); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sig_beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_res";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            for (int k_1__ = 1; k_1__ <= n_coef; ++k_1__) {
                for (int k_0__ = 1; k_0__ <= n_ts; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "beta" << '.' << k_0__ << '.' << k_1__;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            for (int k_0__ = 1; k_0__ <= n_obs; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "y_pred" << '.' << k_0__;
                param_names__.push_back(param_name_stream__.str());
            }
        }


        if (!include_gqs__) return;
    }

}; // model

}




#endif
